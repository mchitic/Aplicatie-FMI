package pkgfinal;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Mihai
 */
public class StateDeFunctii extends javax.swing.JFrame {
    public StateDeFunctii() {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_generareState = new javax.swing.JTable();
        jButton_generareState = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable_generareState.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Denumire post", "Nume si prenume", "Functia didactica", "Titlul stiintific", "Trans de vechime in invatamantul superior", "Titular angajat", "Disciplina", "Facultate", "Cod act", "Nume act", "An de studiu", "Nr serie", "Nr grupe", "Nr doc", "Total OC", "Total ore curs", "Curs sem 1", "Curs sem 2", "Total ore ls", "LS sem 1", "LS sem 2", "Nr sp sem 1", "Nr sp sem 2", "Pozitia"
            }
        ));
        jScrollPane1.setViewportView(jTable_generareState);

        jButton_generareState.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButton_generareState.setText("Generare state de functii");
        jButton_generareState.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_generareStateMouseClicked(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButton1.setText("Inapoi");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton_generareState))
                    .addComponent(jButton1))
                .addContainerGap(7, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jButton_generareState)))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sortSheet(Sheet sheet, int column, int rowStart) {
        boolean sorting = true;
        int lastRow = sheet.getLastRowNum();
        while (sorting == true) {
            sorting = false;
            for (Row row : sheet) {
                // skip if this row is before first to sort
                if (row.getRowNum()<rowStart) continue;
                // end if this is last row
                if (lastRow==row.getRowNum()) break;
                Row row2 = sheet.getRow(row.getRowNum()+1);
                if (row2 == null) continue;
                String firstValue = (row.getCell(column) != null) ? row.getCell(column).getStringCellValue() : "";
                String secondValue = (row2.getCell(column) != null) ? row2.getCell(column).getStringCellValue() : "";
                //compare cell from current row and next row - and switch if secondValue should be before first
                if (secondValue.compareToIgnoreCase(firstValue)<0) {                    
                    sheet.shiftRows(row2.getRowNum(), row2.getRowNum(), -1);
                    sheet.shiftRows(row.getRowNum(), row.getRowNum(), 1);
                    sorting = true;
                }
            }
        }
    }
    
    private void jButton_generareStateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_generareStateMouseClicked
        try {
            // TODO add your handling code here:
            DefaultTableModel modelGenerare = (DefaultTableModel)jTable_generareState.getModel();
            
            Object[] cells = new Object[24];
            
            Workbook workbook = WorkbookFactory.create(new File("Input state de functii/input_state_de_functiiV1.xlsx"));
            Workbook workbook2 = WorkbookFactory.create(new File("Input state de functii/input_state_de_functii_persoane.xlsx"));
            Workbook workbook3 = WorkbookFactory.create(new File("Input state de functii/MODEL STAT FUNCTII 2019 - 2020.xlsx"));
            Workbook workbook1 = new XSSFWorkbook();
            
            Sheet sheet = workbook.getSheetAt(0);
            Sheet sheet2 = workbook2.getSheetAt(0);
            Sheet sheet3 = workbook3.getSheetAt(1);
            Sheet sheet1 = workbook1.createSheet("State de functii");
            
            Font headerFont = workbook1.createFont();
            headerFont.setBold(true);
            headerFont.setFontHeightInPoints((short) 14);
            headerFont.setColor(IndexedColors.BLACK.getIndex());
            
            CellStyle headerCellStyle = workbook1.createCellStyle();
            headerCellStyle.setFont(headerFont);
            
            Row row;
            Row row2;
            Row headerRow = sheet1.createRow(0);
            
            Iterator<Row> rowIterator = sheet.rowIterator();
            Iterator<Row> rowIterator1 = sheet2.rowIterator();
            Iterator<Row> rowIterator2 = sheet3.rowIterator();
            
            //trec peste numele coloanelor
            rowIterator.next();
            rowIterator.next();
            
            //cat timp am randuri in sheet
            while(rowIterator.hasNext()){
                row = rowIterator.next();
                
                Iterator<Cell> cellIterator = row.cellIterator();
                
                cells[0] = "";
                cells[2] = "";
                cells[3] = "";
                cells[4] = "";
                cells[11] = 0;
                cells[12] = 0;
                cells[15] = 0;
                cells[16] = 0;
                cells[17] = 0;
                cells[18] = 0;
                cells[19] = 0;
                cells[20] = 0;
                cells[23] = "";
                 
                //ce nivel este licenta sau master
                Cell nivel = cellIterator.next();
                
                //verific daca nivelul este licenta sau master
                if(nivel.toString().equals("Lic")){
                    cells[9] = "Licenta";
                    cells[8] = "1";
                }
                else{
                    cells[9] = "Master";
                    cells[8] = "2";
                }
                
                //ce tip de facultate am (MAT/INF/CTI)
                cells[7] = cellIterator.next();
                
                //trec peste specializare
                cellIterator.next();
                
                //anul de studiu
                Cell an = cellIterator.next();
                an.setCellType(CellType.STRING);
                cells[10] = an;
                
                //numarul semestrului
                Cell semestru = cellIterator.next();
                semestru.setCellType(CellType.STRING);
                
                //verific cate saptamanii sunt in semestrul 2
                if( ( cells[7].toString().equals("INF") && cells[10].toString().equals("3") && semestru.toString().equals("2") ) 
                      || ( cells[7].toString().equals("MAT") && cells[10].toString().equals("3") && semestru.toString().equals("2") )
                      || ( cells[7].toString().equals("CTI") && cells[10].toString().equals("4") && semestru.toString().equals("2") )
                      || ( cells[10].toString().equals("5") ) ){
                    cells[21] = "14";
                    cells[22] = "10";
                }
                else{
                    cells[21] = "14";
                    cells[22] = "14";
                }
                
                //trec peste cod disciplina
                //cellIterator.next();
                
                //denumire disciplina
                cells[6] = cellIterator.next();
                
                //trec peste statut
                cellIterator.next();
                
                //ce tip este (C / S / L / P)
                Cell tip = cellIterator.next();
                
                //numele seriei/grupei
                Cell codFormatiune = cellIterator.next();
                codFormatiune.setCellType(CellType.STRING);
                
                //numarul de ore
                Cell numarOre = cellIterator.next();
                numarOre.setCellType(CellType.STRING);
                
                //verific daca am curs sau nu si in ce semestru este
                if(tip.toString().equals("C")){
                    cells[11] = codFormatiune;
                    if(semestru.toString().equals("1")){
                        cells[16] = numarOre;
                    }
                    else{
                        cells[17] = numarOre;
                    }                       
                }
                else{                   
                    cells[12] = codFormatiune;
                    switch (numarOre.toString()) {
                        case "3":
                            if(semestru.toString().equals("1")){
                                cells[19] = numarOre;
                            }
                            else{
                                cells[20] = numarOre;
                            }   break;
                        case "2":
                            if(semestru.toString().equals("1")){
                                cells[19] = numarOre;
                            }
                            else{
                                cells[20] = numarOre;
                            }   break;
                        default:
                            if(semestru.toString().equals("1")){
                                cells[19] = numarOre;
                            }
                            else{
                                cells[20] = numarOre;
                            }   break;
                    }
                }                
                
                //trec peste evaluare
                //cellIterator.next();
                
                //numele cadrului didactic
                Cell nume;
                
                cells[1] = "Post vacant";
                cells[5] = "NU";
                
                if(cellIterator.hasNext()){
                    nume = cellIterator.next();
                    //Verific daca numele contine cifre
                    if (nume.toString().chars().allMatch(Character::isDigit)){
                        nume.setCellType(CellType.STRING);
                        cells[1] = nume;
                    }
                    else{                       
                        nume.setCellType(CellType.STRING);
                        cells[1] = nume;
                        cells[5] = "DA";
                    }
                }
                
                BigDecimal ore = new BigDecimal(numarOre.toString());
                BigDecimal sapt = new BigDecimal(cells[22].toString());
                BigDecimal totalsapt = new BigDecimal("28");
                BigDecimal divide = sapt.divide(totalsapt, 3, RoundingMode.HALF_UP);
                BigDecimal oc = ore.multiply(divide);
                
                //caz an neterminal
                if(nivel.toString().equals("Lic") && tip.toString().equals("C")){
                    cells[15] = oc.multiply(new BigDecimal("2")).setScale(2, RoundingMode.HALF_UP);
                }
                else if(nivel.toString().equals("Lic") && ( tip.toString().equals("S") || tip.toString().equals("L") ) ){
                    cells[18] = oc.setScale(2, RoundingMode.HALF_UP);
                }
                else if(nivel.toString().equals("Mas") && tip.toString().equals("C")){
                    cells[15] = oc.multiply(new BigDecimal("2.5")).setScale(2, RoundingMode.HALF_UP);
                }
                else{
                    cells[18] = oc.multiply(new BigDecimal("1.5")).setScale(2, RoundingMode.HALF_UP);
                }
                
                //caz an terminal
                if( ( cells[7].toString().equals("INF") && cells[10].toString().equals("3") && semestru.toString().equals("2") ) 
                      || ( cells[7].toString().equals("MAT") && cells[10].toString().equals("3") && semestru.toString().equals("2") )
                      || ( cells[7].toString().equals("CTI") && cells[10].toString().equals("4") && semestru.toString().equals("2") )
                      || ( cells[9].toString().equals("Master") && cells[10].toString().equals("5") && semestru.toString().equals("2") )){
                          if(tip.toString().equals("C")){
                              if (nivel.toString().equals("Lic"))
                                  cells[15] = oc.multiply(new BigDecimal("2")).setScale(2, RoundingMode.HALF_UP);
                              else
                                  cells[15] = oc.multiply(new BigDecimal("2.5")).setScale(2, RoundingMode.HALF_UP);
                          }else{
                              if (nivel.toString().equals("Lic"))
                                  cells[18] = oc.setScale(2, RoundingMode.HALF_UP);
                              else
                                  cells[18] = oc.multiply(new BigDecimal("1.5")).setScale(2, RoundingMode.HALF_UP);
                          }                       
                    }
                    else if(( cells[7].toString().equals("INF") && cells[10].toString().equals("3") && semestru.toString().equals("1") ) 
                      || ( cells[7].toString().equals("MAT") && cells[10].toString().equals("3") && semestru.toString().equals("1") )
                      || ( cells[7].toString().equals("CTI") && cells[10].toString().equals("4") && semestru.toString().equals("1") )
                      || ( cells[9].toString().equals("Master") && cells[10].toString().equals("5") && semestru.toString().equals("1") )){
                            if(tip.toString().equals("C")){
                                if (nivel.toString().equals("Lic"))
                                    cells[15] = oc.multiply(new BigDecimal("2")).setScale(2, RoundingMode.HALF_UP);
                                else
                                    cells[15] = oc.multiply(new BigDecimal("2.5")).setScale(2, RoundingMode.HALF_UP);
                            }else{
                                if (nivel.toString().equals("Lic"))
                                    cells[18] = oc.setScale(2, RoundingMode.HALF_UP);
                                else
                                    cells[18] = oc.multiply(new BigDecimal("1.5")).setScale(2, RoundingMode.HALF_UP);
                            }     
                        }
                
                if (cells[15].toString().equals("1.43")){
                    cells[15] = "1.42";
                }else if (cells[15].toString().equals("1.79")){
                    cells[15] = "1.78";
                }
                
                if (cells[18].toString().equals("1.43")){
                    cells[18] = "1.42";
                }else if (cells[18].toString().equals("1.79")){
                    cells[18] = "1.78";
                }
                
                BigDecimal curs = new BigDecimal(cells[15].toString());
                BigDecimal ls = new BigDecimal(cells[18].toString());
                cells[14] = curs.add(ls);             
                
                modelGenerare.addRow(cells);                             
            }
            
            while(rowIterator1.hasNext()){
                row2 = rowIterator1.next();
                
                Iterator<Cell> cellIterator1 = row2.cellIterator();
                
                Cell nume = cellIterator1.next();
                Cell titlu = cellIterator1.next();
                Cell functia = cellIterator1.next();
                Cell transa = cellIterator1.next();
                Object[] cell = new Object[2];
                
                switch (functia.toString()) {
                    case "Prof.univ.":
                        cell[0] = "Profesor";
                        cell[1] = "1";
                        break;
                    case "Conf.univ.":
                        cell[0] = "Conferentiar";
                        cell[1] = "3";
                        break;
                    case "Lector univ.":
                        cell[0] = "Lector";
                        cell[1] = "5";
                        break;
                    case "Asist.univ.":
                        cell[0] = "Asistent";
                        cell[1] = "7";
                        break;
                    default:
                        break;
                }
                
                for(int i = 0; i < modelGenerare.getRowCount(); i++){
                    if (modelGenerare.getValueAt(i, 1).toString().trim().equals(nume.toString().trim())){
                        modelGenerare.setValueAt(cell[0].toString(), i, 0);
                        modelGenerare.setValueAt(titlu.toString(), i, 3);
                        modelGenerare.setValueAt(functia.toString(), i, 2);
                        modelGenerare.setValueAt(transa.toString(), i, 4);
                        modelGenerare.setValueAt(cell[1].toString(), i, 23);
                    }
                }
            }
            
            for(int i = 0; i < modelGenerare.getRowCount(); i++){
                for(int j = 11; j <= 13; j++){
                    if (modelGenerare.getValueAt(i, 1).toString().equals("" + j)){
                        modelGenerare.setValueAt("Profesor", i, 0);
                        modelGenerare.setValueAt("2", i, 23);
                    }
                }
                for(int j = 24; j <= 29; j++){
                    if (modelGenerare.getValueAt(i, 1).toString().equals("" + j)){
                        modelGenerare.setValueAt("Conferentiar", i, 0);
                        modelGenerare.setValueAt("4", i, 23);
                    }
                }
                for(int j = 53; j <= 62; j++){
                    if (modelGenerare.getValueAt(i, 1).toString().equals("" + j)){
                        modelGenerare.setValueAt("Lector", i, 0);
                        modelGenerare.setValueAt("6", i, 23);
                    }
                }
                for(int j = 72; j <= 83; j++){
                    if (modelGenerare.getValueAt(i, 1).toString().equals("" + j)){
                        modelGenerare.setValueAt("Asistent", i, 0);
                        modelGenerare.setValueAt("8", i, 23);
                    }
                }
                if(modelGenerare.getValueAt(i, 1).toString().equals("Post vacant")){
                    modelGenerare.setValueAt("9", i, 23);
                }
                if(modelGenerare.getValueAt(i, 1).toString().matches("[0-9]+$")){
                    modelGenerare.setValueAt("NU", i, 5);
                }                                    
            }
            
            for(int i = 1; i < modelGenerare.getRowCount()-1 ; i++){
                for(int j = i+1; j < modelGenerare.getRowCount(); j++){
                    if( ( modelGenerare.getValueAt(i, 1).toString().equals(modelGenerare.getValueAt(j, 1).toString()) )
                       && ( modelGenerare.getValueAt(i, 6).toString().equals(modelGenerare.getValueAt(j, 6).toString()) ) 
                       && ( modelGenerare.getValueAt(i, 7).toString().equals(modelGenerare.getValueAt(j, 7).toString()) ) ){
                        if(modelGenerare.getValueAt(j, 11).toString().equals("0")){
                            modelGenerare.setValueAt(modelGenerare.getValueAt(i, 12).toString()+", "+modelGenerare.getValueAt(j, 12).toString(), i, 12);                       
                        }
                        else{
                            modelGenerare.setValueAt(modelGenerare.getValueAt(i, 11).toString()+", "+modelGenerare.getValueAt(j, 11).toString(), i, 11);
                        }
                        if(!modelGenerare.getValueAt(j, 16).toString().equals("0")){
                            modelGenerare.setValueAt(Integer.parseInt(modelGenerare.getValueAt(i, 16).toString())
                                    +Integer.parseInt(modelGenerare.getValueAt(j, 16).toString()), i, 16);
                        }
                        if(!modelGenerare.getValueAt(j, 17).toString().equals("0")){
                            modelGenerare.setValueAt(Integer.parseInt(modelGenerare.getValueAt(i, 17).toString())
                                    +Integer.parseInt(modelGenerare.getValueAt(j, 17).toString()), i, 17);
                        }
                        if(!modelGenerare.getValueAt(j, 19).toString().equals("0")){
                            modelGenerare.setValueAt(Integer.parseInt(modelGenerare.getValueAt(i, 19).toString())
                                    +Integer.parseInt(modelGenerare.getValueAt(j, 19).toString()), i, 19);
                        }
                        if(!modelGenerare.getValueAt(j, 20).toString().equals("0")){
                            modelGenerare.setValueAt(Integer.parseInt(modelGenerare.getValueAt(i, 20).toString())
                                    +Integer.parseInt(modelGenerare.getValueAt(j, 20).toString()), i, 20);
                        }
                        if(!modelGenerare.getValueAt(j, 15).toString().equals("0")){
                            modelGenerare.setValueAt(new BigDecimal(modelGenerare.getValueAt(i, 15).toString()).
                                    add(new BigDecimal(modelGenerare.getValueAt(j, 15).toString())), i, 15);
                        }
                        if(!modelGenerare.getValueAt(j, 18).toString().equals("0")){
                            modelGenerare.setValueAt(new BigDecimal(modelGenerare.getValueAt(i, 18).toString()).
                                    add(new BigDecimal(modelGenerare.getValueAt(j, 18).toString())), i, 18);
                        }
                        if(!modelGenerare.getValueAt(j, 14).toString().equals("0")){
                            modelGenerare.setValueAt(new BigDecimal(modelGenerare.getValueAt(i, 14).toString()).
                                    add(new BigDecimal(modelGenerare.getValueAt(j, 14).toString())), i, 14);
                        }             
                        
                        modelGenerare.removeRow(j);
                        j--;
                    }                  
                }
            }
            
            JTable table = new JTable(modelGenerare);
            TableRowSorter<TableModel> sorter = new TableRowSorter<>(table.getModel());
            table.setRowSorter(sorter);

            List<RowSorter.SortKey> sortKeys = new ArrayList<>(24);
            sortKeys.add(new RowSorter.SortKey(23, SortOrder.ASCENDING));
            sortKeys.add(new RowSorter.SortKey(1, SortOrder.ASCENDING));
            sorter.setSortKeys(sortKeys);                     
            
            int counterRow;   
            Object[] total = new Object[24];
            total[0] = ""; total[1] = ""; total[2] = ""; total[3] = ""; total[4] = "";
            total[5] = ""; total[6] = ""; total[7] = ""; total[8] = ""; total[9] = ""; 
            total[10] = ""; total[11] = ""; total[12] = ""; total[13] = ""; total[14] = "";
            total[15] = ""; total[16] = ""; total[17] = ""; total[18] = ""; total[19] = "";
            total[20] = ""; total[21] = ""; total[22] = ""; total[23] = "";
            
            for(int i = 0; i < table.getRowCount()-1 ; i++){
                total[1] = table.getValueAt(i, 1).toString()+"Total";
                total[23] = table.getValueAt(i, 23).toString();
                total[8] = "T";
                total[14] = table.getValueAt(i, 14);              
                if(!table.getValueAt(i, 15).toString().trim().equals(""))
                    total[15] = table.getValueAt(i, 15); 
                else
                    total[15] = 0;
                if(!table.getValueAt(i, 18).toString().trim().equals(""))
                    total[18] = table.getValueAt(i, 18); 
                else
                    total[18] = 0;
                counterRow = i;
                for(int j = i+1; j < table.getRowCount(); j++){
                    if( ( table.getValueAt(i, 1).toString().trim().equals(table.getValueAt(j, 1).toString().trim()) ) ){
                        total[14] = new BigDecimal(total[14].toString()).add(new BigDecimal(table.getValueAt(j, 14).toString()));
                        if(!table.getValueAt(j, 15).toString().trim().equals(""))
                            total[15] = new BigDecimal(total[15].toString()).add(new BigDecimal(table.getValueAt(j, 15).toString()));
                        if(!table.getValueAt(j, 18).toString().trim().equals(""))
                            total[18] = new BigDecimal(total[18].toString()).add(new BigDecimal(table.getValueAt(j, 18).toString()));
                        counterRow++;
                    }
                }
                if(counterRow>i)
                    modelGenerare.insertRow(counterRow, total);        
                i = counterRow;
            }
            
            table.setRowSorter(sorter);
            sortKeys.add(new RowSorter.SortKey(23, SortOrder.ASCENDING));
            sortKeys.add(new RowSorter.SortKey(1, SortOrder.ASCENDING));
            sorter.setSortKeys(sortKeys);
            
            for(int i = 0; i < table.getRowCount()-1 ; i++){
                for(int j = i+1; j < table.getRowCount(); j++){
                    if( (table.getValueAt(i, 1).toString().trim().equals(table.getValueAt(j, 1).toString()) ) ){
                        table.setValueAt("", j, 0);
                        table.setValueAt("", j, 1);
                        table.setValueAt("", j, 5);
                        table.setValueAt("", j, 2);
                        table.setValueAt("", j, 3);
                        table.setValueAt("", j, 4);
                        table.setValueAt("", j, 23);
                    }
                }
            }

            for(int i = 0 ; i < modelGenerare.getRowCount(); i++){
                modelGenerare.setValueAt(modelGenerare.getValueAt(i, 11).toString().replace("0,", "").trim(), i, 11);
                modelGenerare.setValueAt(modelGenerare.getValueAt(i, 12).toString().replace("0,", "").trim(), i, 12);
                modelGenerare.setValueAt(modelGenerare.getValueAt(i, 11).toString().replace("0", "").trim(), i, 11);
                modelGenerare.setValueAt(modelGenerare.getValueAt(i, 12).toString().replace("0", "").trim(), i, 12);
                for(int j = 15; j <= 20; j++){
                    if(modelGenerare.getValueAt(i, j).toString().equals("0")){
                        modelGenerare.setValueAt(modelGenerare.getValueAt(i, j).toString().replace("0", "").trim(), i, j);
                    }
                }
                for(int j = 1; j <= 9; j++){
                    if (modelGenerare.getValueAt(i, 23).toString().equals("" + j)){
                        modelGenerare.setValueAt(modelGenerare.getValueAt(i, 23).toString().replace("" + j, "").trim(), i, 23);
                    }
                }
            }
            
            for(int i = 0; i < modelGenerare.getColumnCount(); i++) {
                Cell cell = headerRow.createCell(i);
                cell.setCellValue(modelGenerare.getColumnName(i));
                cell.setCellStyle(headerCellStyle);
            }
            
            /*
            rowIterator2.next(); rowIterator2.next(); rowIterator2.next(); rowIterator2.next(); rowIterator2.next();
            rowIterator2.next(); rowIterator2.next(); rowIterator2.next(); rowIterator2.next(); rowIterator2.next();
            rowIterator2.next(); rowIterator2.next(); rowIterator2.next(); rowIterator2.next(); rowIterator2.next();
            rowIterator2.next(); rowIterator2.next(); rowIterator2.next(); rowIterator2.next(); rowIterator2.next();
            rowIterator2.next(); rowIterator2.next(); rowIterator2.next(); rowIterator2.next(); rowIterator2.next();
            rowIterator2.next(); rowIterator2.next(); rowIterator2.next(); 
            
            int a = 1;
            
            while(rowIterator2.hasNext()){
                
                row = rowIterator2.next();
                
                Iterator<Cell> cellIterator = row.cellIterator();
                
                cellIterator.next(); cellIterator.next(); cellIterator.next(); cellIterator.next(); cellIterator.next();
                cellIterator.next(); cellIterator.next(); cellIterator.next(); cellIterator.next(); cellIterator.next(); 
                cellIterator.next(); cellIterator.next(); cellIterator.next(); cellIterator.next(); cellIterator.next(); 
                
                Cell oc = cellIterator.next();
                oc.setCellType(CellType.STRING);
                
                Cell ore = cellIterator.next();
                ore.setCellType(CellType.STRING);
                
                cellIterator.next(); cellIterator.next();
                
                Cell ls = cellIterator.next();
                ls.setCellType(CellType.STRING);
                
                System.out.println( oc.toString() + " "+ ore + " " + ls);
                
                if(!oc.getStringCellValue().equals(table.getValueAt(a, 14).toString())){
                    System.out.println("Diferenta "+a+" 14");
                    System.out.println(table.getValueAt(a, 14).toString());
                }
                if(!ore.getStringCellValue().equals(table.getValueAt(a, 15).toString())){
                    System.out.println("Diferenta "+a+" 15");
                }
                if(!ls.getStringCellValue().equals(table.getValueAt(a, 18).toString())){
                    System.out.println("Diferenta "+a+" 18");
                }
                a++;
            }               
            */
            int rowNum = 1;
            for(int i = 0; i < table.getRowCount(); i++) {
                Row row1 = sheet1.createRow(rowNum++);
                
                row1.createCell(0).setCellValue(table.getValueAt(i, 0).toString());
                row1.createCell(1).setCellValue(table.getValueAt(i, 1).toString());
                row1.createCell(2).setCellValue(table.getValueAt(i, 2).toString());
                row1.createCell(3).setCellValue(table.getValueAt(i, 3).toString());
                row1.createCell(4).setCellValue(table.getValueAt(i, 4).toString());
                row1.createCell(5).setCellValue(table.getValueAt(i, 5).toString());
                row1.createCell(6).setCellValue(table.getValueAt(i, 6).toString());
                row1.createCell(7).setCellValue(table.getValueAt(i, 7).toString());
                row1.createCell(8).setCellValue(table.getValueAt(i, 8).toString());
                row1.createCell(9).setCellValue(table.getValueAt(i, 9).toString());
                row1.createCell(10).setCellValue(table.getValueAt(i, 10).toString());
                row1.createCell(11).setCellValue(table.getValueAt(i, 11).toString());
                row1.createCell(12).setCellValue(table.getValueAt(i, 12).toString());
                //row1.createCell(13).setCellValue(modelGenerare.getValueAt(i, 13).toString());
                row1.createCell(14).setCellValue(table.getValueAt(i, 14).toString());
                row1.createCell(15).setCellValue(table.getValueAt(i, 15).toString());
                row1.createCell(16).setCellValue(table.getValueAt(i, 16).toString());
                row1.createCell(17).setCellValue(table.getValueAt(i, 17).toString());
                row1.createCell(18).setCellValue(table.getValueAt(i, 18).toString());  
                row1.createCell(19).setCellValue(table.getValueAt(i, 19).toString());
                row1.createCell(20).setCellValue(table.getValueAt(i, 20).toString());
                row1.createCell(21).setCellValue(table.getValueAt(i, 21).toString());
                row1.createCell(22).setCellValue(table.getValueAt(i, 22).toString());
                row1.createCell(23).setCellValue(table.getValueAt(i, 23).toString());
            }
            
            for(int i = 0; i < modelGenerare.getColumnCount(); i++) {
                sheet1.autoSizeColumn(i);
            }
            
            FileOutputStream fileOut = null;
            try {
                fileOut = new FileOutputStream("Output state de functii/output_state_de_functii.xlsx");
            } catch (FileNotFoundException ex) {
                Logger.getLogger(StateDeFunctii.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                workbook1.write(fileOut);
                JOptionPane.showMessageDialog(null, "Fisierul excel a fost creat cu succes!");
            } catch (IOException ex) {
                Logger.getLogger(StateDeFunctii.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                fileOut.close();
            } catch (IOException ex) {
                Logger.getLogger(StateDeFunctii.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                workbook.close();
                workbook1.close();
            } catch (IOException ex) {
                Logger.getLogger(StateDeFunctii.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } catch (IOException ex) {
            Logger.getLogger(StateDeFunctii.class.getName()).log(Level.SEVERE, null, ex);
        } catch (EncryptedDocumentException ex) {
            Logger.getLogger(StateDeFunctii.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton_generareStateMouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        Meniu meniu = new Meniu();
        meniu.setVisible(true);  
        this.dispose();
    }//GEN-LAST:event_jButton1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StateDeFunctii.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StateDeFunctii.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StateDeFunctii.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StateDeFunctii.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StateDeFunctii().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton_generareState;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable_generareState;
    // End of variables declaration//GEN-END:variables
}
